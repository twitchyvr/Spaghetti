# Enterprise Documentation Platform - Development Environment
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: enterprise-docs-db
    environment:
      POSTGRES_DB: enterprisedocs
      POSTGRES_USER: enterprisedocs
      POSTGRES_PASSWORD: dev_password_change_in_production
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db-init:/docker-entrypoint-initdb.d
    networks:
      - enterprise-docs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U enterprisedocs -d enterprisedocs"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: enterprise-docs-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - enterprise-docs-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass dev_redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Elasticsearch for document search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: enterprise-docs-search
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - enterprise-docs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Backend (.NET Core)
  api:
    build:
      context: .
      dockerfile: src/core/api/Dockerfile
      target: development
    container_name: enterprise-docs-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=enterprisedocs;Username=enterprisedocs;Password=dev_password_change_in_production
      - ConnectionStrings__Redis=redis:6379,password=dev_redis_password
      - ConnectionStrings__Elasticsearch=http://elasticsearch:9200
      - Authentication__Provider=jwt
      - JWT__SecretKey=super_secret_key_change_in_production_at_least_32_chars
      - JWT__Issuer=EnterpriseDocsAPI
      - JWT__Audience=EnterpriseDocsClient
      - Storage__Provider=local
      - Storage__LocalPath=/app/uploads
      - AI__Provider=mock
      - Modules__Directory=/app/modules
      - Serilog__MinimumLevel=Debug
    ports:
      - "5000:5000"
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
      - ./modules:/app/modules
    networks:
      - enterprise-docs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React)
  frontend:
    build:
      context: .
      dockerfile: src/frontend/Dockerfile
      target: development
    container_name: enterprise-docs-frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:5000/api
      - VITE_ENVIRONMENT=development
      - VITE_DEPLOYMENT_TYPE=digitalocean
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
    networks:
      - enterprise-docs-network
    depends_on:
      - api
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Development Database Admin (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: enterprise-docs-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@enterprisedocs.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - enterprise-docs-network
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - dev-tools

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: enterprise-docs-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - enterprise-docs-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Test Runner Container
  test-runner:
    build:
      context: .
      dockerfile: src/tests/Dockerfile
    container_name: enterprise-docs-tests
    environment:
      - ASPNETCORE_ENVIRONMENT=Testing
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=enterprisedocs_test;Username=enterprisedocs;Password=dev_password_change_in_production
    volumes:
      - ./src:/app/src
      - ./test-results:/app/test-results
    networks:
      - enterprise-docs-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - testing
    command: ["dotnet", "test", "--logger", "trx", "--results-directory", "/app/test-results"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  pgadmin_data:
    driver: local
  grafana_data:
    driver: local

networks:
  enterprise-docs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16