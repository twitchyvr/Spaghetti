name: spaghetti-platform

# Global routing configuration - API routes must be first to override catch_all
routes:
- path: /api
  component_name: api
- path: /health
  component_name: api
- path: /swagger
  component_name: api
- path: /hubs
  component_name: api

services:
# Minimal .NET Core API service for Sprint 7 deployment optimization
- name: api
  source_dir: src/core/api
  github:
    repo: twitchyvr/Spaghetti
    branch: main
    deploy_on_push: true
  environment_slug: dotnet
  instance_count: 1
  instance_size_slug: basic-xxs
  http_port: 8080
  health_check:
    http_path: /health
    initial_delay_seconds: 60
    period_seconds: 15
    timeout_seconds: 10
    success_threshold: 1
    failure_threshold: 5
  build_command: dotnet restore && dotnet publish -c Release -o out --self-contained false
  run_command: cd out && dotnet EnterpriseDocsCore.API.dll --urls http://0.0.0.0:$PORT
  envs:
  - key: ASPNETCORE_ENVIRONMENT
    value: Production
  - key: ASPNETCORE_URLS
    value: http://0.0.0.0:$PORT
  - key: PORT
    value: "8080"
  - key: ConnectionStrings__DefaultConnection
    value: "${DATABASE_URL}"
  - key: ConnectionStrings__RedisConnection
    value: "localhost:6379"  # Update this with your Redis connection if needed
  - key: Authentication__SecretKey
    value: "Sprint6-Enterprise-JWT-Secret-Key-For-Production-Deployment-2025"
  - key: Authentication__Issuer
    value: "EnterpriseDocsAPI"
  - key: Authentication__Audience
    value: "EnterpriseDocsClient"
  - key: Storage__Provider
    value: "local"
  - key: Logging__LogLevel__Default
    value: "Information"
  - key: Logging__LogLevel__Microsoft.AspNetCore
    value: "Information"

# Frontend service with catch-all route MUST be listed last
- name: frontend
  source_dir: src/frontend
  github:
    repo: twitchyvr/Spaghetti
    branch: main
    deploy_on_push: true
  build_command: npm ci && npm run build
  run_command: npm run serve
  environment_slug: node-js
  instance_count: 1
  instance_size_slug: basic-xxs
  http_port: 8080
  catch_all: true
  envs:
  - key: VITE_API_BASE_URL
    value: /api
  - key: VITE_ENVIRONMENT
    value: production
  - key: NODE_ENV
    value: production
  - key: PORT
    value: "8080"

# Using external managed databases - no need to create new ones
# PostgreSQL: db-postgresql-nyc1-09943 (already created and configured above)
# Redis: You may need to create a separate Redis instance or use the existing one