const d={},h=d.VITE_API_BASE_URL||"http://localhost:5001/api";class s extends Error{constructor(n,a){super(a),this.status=n,this.name="ApiError"}}async function e(t,n={}){const a=`${h}${t}`,o={"Content-Type":"application/json"},c=localStorage.getItem("authToken");c&&(o.Authorization=`Bearer ${c}`);try{const r=await fetch(a,{...n,headers:{...o,...n.headers}});if(!r.ok){const u=await r.json().catch(()=>({}));throw new s(r.status,u.message||`HTTP ${r.status}: ${r.statusText}`)}const i=await r.text();return i?JSON.parse(i):{}}catch(r){throw r instanceof s?r:new s(0,r instanceof Error?r.message:"Network error")}}const m={async getDatabaseStats(){return e("/admin/database-stats")},async getSampleDataStatus(){return e("/admin/sample-data-status")},async seedSampleData(){return e("/admin/seed-sample-data",{method:"POST"})},async clearAllData(t){return e(`/admin/clear-all-data?confirmationToken=${t}`,{method:"DELETE"})},async createAdminUser(t){return e("/admin/create-admin-user",{method:"POST",body:JSON.stringify(t)})}},y={async getDocuments(t){const n=new URLSearchParams;t?.page&&n.append("page",t.page.toString()),t?.pageSize&&n.append("pageSize",t.pageSize.toString()),t?.searchTerm&&n.append("searchTerm",t.searchTerm),t?.tenantId&&n.append("tenantId",t.tenantId);const a=n.toString();return e(`/documents${a?`?${a}`:""}`)},async getDocument(t){return e(`/documents/${t}`)},async createDocument(t){return e("/documents",{method:"POST",body:JSON.stringify(t)})},async updateDocument(t,n){return e(`/documents/${t}`,{method:"PUT",body:JSON.stringify(n)})},async deleteDocument(t){return e(`/documents/${t}`,{method:"DELETE"})}},g={async getCurrentUser(){return e("/users/me")},async updateProfile(t){return e("/users/me",{method:"PUT",body:JSON.stringify(t)})},async getUsers(){return e("/users")}},p={async login(t){return e("/auth/login",{method:"POST",body:JSON.stringify(t)})},async register(t){return e("/auth/register",{method:"POST",body:JSON.stringify(t)})},async logout(){return e("/auth/logout",{method:"POST"})},async refreshToken(){return e("/auth/refresh",{method:"POST"})}},S={async check(){return e("/health")}},l={admin:m,documents:y,users:g,auth:p,health:S};export{l as a};
