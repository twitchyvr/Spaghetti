// <auto-generated />
using System;
using EnterpriseDocsCore.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EnterpriseDocsCore.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250728051936_EnhanceDocumentManagementSystem")]
    partial class EnhanceDocumentManagementSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileHash")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IndexBySearchEngines")
                        .HasColumnType("boolean");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsLatestVersion")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastPublicViewAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentDocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentDocumentId1")
                        .HasColumnType("uuid");

                    b.Property<int>("PublicAccessLevel")
                        .HasColumnType("integer");

                    b.Property<string>("PublicSlug")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PublicViewCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PublishedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<string>("VersionNotes")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParentDocumentId");

                    b.HasIndex("ParentDocumentId1");

                    b.HasIndex("PublishedBy");

                    b.HasIndex("TenantId1");

                    b.HasIndex("UserId");

                    b.HasIndex("ContentType", "TenantId")
                        .HasFilter("ContentType IS NOT NULL");

                    b.HasIndex("DocumentType", "Industry");

                    b.HasIndex("TenantId", "FileHash")
                        .HasFilter("FileHash IS NOT NULL");

                    b.HasIndex("TenantId", "FileName")
                        .HasFilter("FileName IS NOT NULL");

                    b.HasIndex("TenantId", "IsLatestVersion", "ParentDocumentId")
                        .HasFilter("ParentDocumentId IS NOT NULL");

                    b.HasIndex("TenantId", "Status", "UpdatedAt");

                    b.HasIndex("TenantId", "Version", "ParentDocumentId")
                        .HasFilter("ParentDocumentId IS NOT NULL");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.DocumentAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentAttachments");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.DocumentAuditEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Details")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentId1")
                        .HasColumnType("uuid");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId1");

                    b.HasIndex("UserId");

                    b.HasIndex("DocumentId", "Timestamp");

                    b.ToTable("DocumentAuditEntries");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.DocumentPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GrantedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Permission")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId1");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("DocumentId", "RoleId");

                    b.HasIndex("DocumentId", "UserId");

                    b.ToTable("DocumentPermissions");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.DocumentTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float>("Confidence")
                        .HasColumnType("real");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSystemGenerated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId", "Name");

                    b.HasIndex("Name", "Category");

                    b.ToTable("DocumentTags");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.ImpersonationSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminIPAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AdminUserAgent")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AdminUserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("AdminUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndReason")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TargetTenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("TargetUserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("TargetTenantId");

                    b.HasIndex("AdminUserId", "IsActive");

                    b.HasIndex("TargetUserId", "StartedAt");

                    b.ToTable("ImpersonationSessions");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.PlatformAdminAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("AdminUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Details")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TargetEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("TargetEntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("Action", "Timestamp");

                    b.HasIndex("AdminUserId", "Timestamp");

                    b.HasIndex("TargetEntityType", "TargetEntityId");

                    b.ToTable("PlatformAdminAuditLogs");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 7, 28, 5, 19, 36, 210, DateTimeKind.Utc).AddTicks(7280),
                            Description = "Full system administration access",
                            IsActive = true,
                            IsSystemRole = true,
                            Name = "System Administrator"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 7, 28, 5, 19, 36, 210, DateTimeKind.Utc).AddTicks(7280),
                            Description = "Full tenant administration access",
                            IsActive = true,
                            IsSystemRole = true,
                            Name = "Tenant Administrator"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 7, 28, 5, 19, 36, 210, DateTimeKind.Utc).AddTicks(7290),
                            Description = "Standard user access",
                            IsActive = true,
                            IsSystemRole = true,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("boolean");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Resource")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId", "Permission");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dcd9d73f-f45d-42c5-95e6-d9a1e5c87a88"),
                            IsGranted = true,
                            Permission = "System.Admin",
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("d2f4ab9a-17f5-4b4a-8c5d-45f438e70047"),
                            IsGranted = true,
                            Permission = "Tenant.Admin",
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("0cf4d27b-6ec6-4411-b2f1-46b0a60beb1c"),
                            IsGranted = true,
                            Permission = "User.Admin",
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("2c4b934f-7d9b-4d1e-bff7-16fbc668ae16"),
                            IsGranted = true,
                            Permission = "Document.Admin",
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("6b5612b9-d634-430a-8453-cdf85e7c1b1e"),
                            IsGranted = true,
                            Permission = "Module.Admin",
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("a26098dc-8f2c-47c8-af80-8ba4dcabc659"),
                            IsGranted = true,
                            Permission = "Tenant.Admin",
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("a9eafd13-def4-41eb-846c-bcd61d9dc7fb"),
                            IsGranted = true,
                            Permission = "User.Admin",
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("8a27a956-18f0-44c6-a32a-b426b54fa4db"),
                            IsGranted = true,
                            Permission = "Document.Admin",
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("87e4325a-18c6-40c5-823b-14772ee26ad6"),
                            IsGranted = true,
                            Permission = "Module.Configure",
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("d4e32fd1-e67c-4400-953b-04605a155e43"),
                            IsGranted = true,
                            Permission = "Document.Read",
                            RoleId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("9cc5d6c7-45f7-482e-b67c-51b092004513"),
                            IsGranted = true,
                            Permission = "Document.Write",
                            RoleId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("e6e53777-1b70-4b16-a764-d8337f587cbc"),
                            IsGranted = true,
                            Permission = "Document.Create",
                            RoleId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("54654dfb-d339-46c3-9e24-f40f77bc0ef2"),
                            IsGranted = true,
                            Permission = "User.Read",
                            RoleId = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subdomain")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SuspensionReason")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("Subdomain")
                        .IsUnique();

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.TenantAuditEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Details")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Timestamp");

                    b.ToTable("TenantAuditEntries");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.TenantModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AdditionalCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EnabledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EnabledBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ModuleName")
                        .IsUnique();

                    b.ToTable("TenantModules");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("SessionExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LastLoginAt");

                    b.HasIndex("TenantId", "IsActive");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.UserAuditEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Details")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Timestamp");

                    b.ToTable("UserAuditEntries");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.UserAuthentication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProviderData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Provider", "ExternalId")
                        .IsUnique();

                    b.ToTable("UserAuthentications");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AssignedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId", "IsActive");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Interfaces.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RevokedReason")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("RevokedAt");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.Document", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Document", null)
                        .WithMany()
                        .HasForeignKey("ParentDocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Document", "ParentDocument")
                        .WithMany("ChildDocuments")
                        .HasForeignKey("ParentDocumentId1");

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", "PublishedByUser")
                        .WithMany()
                        .HasForeignKey("PublishedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Tenant", null)
                        .WithMany("Documents")
                        .HasForeignKey("TenantId1");

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", null)
                        .WithMany("CreatedDocuments")
                        .HasForeignKey("UserId");

                    b.OwnsOne("EnterpriseDocsCore.Domain.Entities.AIMetadata", "AIMetadata", b1 =>
                        {
                            b1.Property<Guid>("DocumentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AutoGeneratedSummary")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<float>("ConfidenceScore")
                                .HasColumnType("real");

                            b1.Property<string>("ModelUsed")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<DateTime>("ProcessedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ProcessingResults")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PromptUsed")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("SuggestedTags")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DocumentId");

                            b1.ToTable("Documents");

                            b1.WithOwner()
                                .HasForeignKey("DocumentId");
                        });

                    b.OwnsOne("EnterpriseDocsCore.Domain.Entities.DocumentMetadata", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("DocumentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Keywords")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Language")
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<string>("Properties")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SourceAgent")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<DateTime?>("SourceCaptureTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("SourceLocation")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("SourceModule")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Summary")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("WordCount")
                                .HasColumnType("integer");

                            b1.HasKey("DocumentId");

                            b1.ToTable("Documents");

                            b1.WithOwner()
                                .HasForeignKey("DocumentId");
                        });

                    b.Navigation("AIMetadata");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Metadata")
                        .IsRequired();

                    b.Navigation("ParentDocument");

                    b.Navigation("PublishedByUser");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.DocumentAttachment", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Document", "Document")
                        .WithMany("Attachments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.DocumentAuditEntry", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Document", null)
                        .WithMany("AuditEntries")
                        .HasForeignKey("DocumentId1");

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.DocumentPermission", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Document", null)
                        .WithMany("Permissions")
                        .HasForeignKey("DocumentId1");

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Role", null)
                        .WithMany("DocumentPermissions")
                        .HasForeignKey("RoleId1");

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", null)
                        .WithMany("DocumentPermissions")
                        .HasForeignKey("UserId1");

                    b.Navigation("Document");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.DocumentTag", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Document", "Document")
                        .WithMany("Tags")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.ImpersonationSession", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Tenant", "TargetTenant")
                        .WithMany()
                        .HasForeignKey("TargetTenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");

                    b.Navigation("TargetTenant");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.PlatformAdminAuditLog", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.Role", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Roles")
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.Tenant", b =>
                {
                    b.OwnsOne("EnterpriseDocsCore.Domain.Entities.TenantBilling", "Billing", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uuid");

                            b1.Property<int>("APICallsThisMonth")
                                .HasColumnType("integer");

                            b1.Property<string>("BillingMetadata")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)");

                            b1.Property<int>("DocumentsCreatedThisMonth")
                                .HasColumnType("integer");

                            b1.Property<bool>("IsTrialActive")
                                .HasColumnType("boolean");

                            b1.Property<decimal>("MonthlyRate")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.Property<DateTime?>("NextBillingDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("PaymentStatus")
                                .HasColumnType("integer");

                            b1.Property<string>("PlanId")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<long>("StorageUsedBytes")
                                .HasColumnType("bigint");

                            b1.Property<DateTime?>("SubscriptionEndDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("SubscriptionId")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<DateTime?>("SubscriptionStartDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("TrialEndDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.OwnsOne("EnterpriseDocsCore.Domain.Entities.TenantBranding", "Branding", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AccentColor")
                                .HasMaxLength(7)
                                .HasColumnType("character varying(7)");

                            b1.Property<string>("CompanyName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("CustomCSS")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<bool>("CustomDomain")
                                .HasColumnType("boolean");

                            b1.Property<string>("CustomDomainName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("CustomLabels")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FaviconUrl")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)");

                            b1.Property<string>("FontFamily")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<bool>("HidePlatformBranding")
                                .HasColumnType("boolean");

                            b1.Property<string>("LogoUrl")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)");

                            b1.Property<string>("PrimaryColor")
                                .HasMaxLength(7)
                                .HasColumnType("character varying(7)");

                            b1.Property<string>("SecondaryColor")
                                .HasMaxLength(7)
                                .HasColumnType("character varying(7)");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.OwnsOne("EnterpriseDocsCore.Domain.Entities.TenantConfiguration", "Configuration", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uuid");

                            b1.Property<int>("AuditLogRetentionDays")
                                .HasColumnType("integer");

                            b1.Property<string>("ComplianceFrameworks")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("CustomSettings")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("DefaultLanguage")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("DefaultTimeZone")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("DocumentRetentionDays")
                                .HasColumnType("integer");

                            b1.Property<bool>("EnableAIFeatures")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableAuditLogging")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableAutoDocumentation")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableDataEncryption")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableDataExport")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableScreenCapture")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableVoiceCapture")
                                .HasColumnType("boolean");

                            b1.Property<string>("EnabledIntegrations")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("PasswordExpiryDays")
                                .HasColumnType("integer");

                            b1.Property<bool>("RequireMFA")
                                .HasColumnType("boolean");

                            b1.Property<bool>("RequireSSO")
                                .HasColumnType("boolean");

                            b1.Property<int>("SessionTimeoutMinutes")
                                .HasColumnType("integer");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.OwnsOne("EnterpriseDocsCore.Domain.Entities.TenantQuotas", "Quotas", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uuid");

                            b1.Property<int>("AIProcessingMinutesUsedThisMonth")
                                .HasColumnType("integer");

                            b1.Property<int>("APICallsThisMonth")
                                .HasColumnType("integer");

                            b1.Property<int>("ActiveUsers")
                                .HasColumnType("integer");

                            b1.Property<int>("DocumentsCreatedThisMonth")
                                .HasColumnType("integer");

                            b1.Property<int>("MaxAIProcessingMinutesPerMonth")
                                .HasColumnType("integer");

                            b1.Property<int>("MaxAPICallsPerMonth")
                                .HasColumnType("integer");

                            b1.Property<int>("MaxDocumentsPerMonth")
                                .HasColumnType("integer");

                            b1.Property<long>("MaxStorageBytes")
                                .HasColumnType("bigint");

                            b1.Property<int>("MaxUsers")
                                .HasColumnType("integer");

                            b1.Property<string>("ModuleQuotas")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("QuotaResetDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<long>("UsedStorageBytes")
                                .HasColumnType("bigint");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.Navigation("Billing")
                        .IsRequired();

                    b.Navigation("Branding")
                        .IsRequired();

                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("Quotas")
                        .IsRequired();
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.TenantAuditEntry", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Tenant", "Tenant")
                        .WithMany("AuditEntries")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.TenantModule", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Modules")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.User", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId");

                    b.OwnsOne("EnterpriseDocsCore.Domain.Entities.UserProfile", "Profile", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AvatarUrl")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)");

                            b1.Property<string>("Bio")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("CustomFields")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Department")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Industry")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("JobTitle")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Language")
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<string>("PhoneNumber")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("TimeZone")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("EnterpriseDocsCore.Domain.Entities.UserSettings", "Settings", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("AllowDataRetention")
                                .HasColumnType("boolean");

                            b1.Property<string>("CustomSettings")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("DataRetentionDays")
                                .HasColumnType("integer");

                            b1.Property<string>("DefaultDocumentType")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<bool>("EnableAIAssistance")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableAutoDocumentation")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableEmailNotifications")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableFileMonitoring")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnablePushNotifications")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableScreenCapture")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableSlackNotifications")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableTeamsNotifications")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableVoiceCapture")
                                .HasColumnType("boolean");

                            b1.Property<string>("FavoriteAgents")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ModuleSettings")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("PrivacyLevel")
                                .HasColumnType("integer");

                            b1.Property<string>("Theme")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.UserAuditEntry", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", "User")
                        .WithMany("AuditEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.UserAuthentication", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", "User")
                        .WithMany("AuthenticationMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Interfaces.RefreshToken", b =>
                {
                    b.HasOne("EnterpriseDocsCore.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.Document", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("AuditEntries");

                    b.Navigation("ChildDocuments");

                    b.Navigation("Permissions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.Role", b =>
                {
                    b.Navigation("DocumentPermissions");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("AuditEntries");

                    b.Navigation("Documents");

                    b.Navigation("Modules");

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EnterpriseDocsCore.Domain.Entities.User", b =>
                {
                    b.Navigation("AuditEntries");

                    b.Navigation("AuthenticationMethods");

                    b.Navigation("CreatedDocuments");

                    b.Navigation("DocumentPermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
